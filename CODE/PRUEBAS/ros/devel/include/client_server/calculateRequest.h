// Generated by gencpp from file client_server/calculateRequest.msg
// DO NOT EDIT!


#ifndef CLIENT_SERVER_MESSAGE_CALCULATEREQUEST_H
#define CLIENT_SERVER_MESSAGE_CALCULATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace client_server
{
template <class ContainerAllocator>
struct calculateRequest_
{
  typedef calculateRequest_<ContainerAllocator> Type;

  calculateRequest_()
    : operation()
    , value1(0)
    , value2(0)  {
    }
  calculateRequest_(const ContainerAllocator& _alloc)
    : operation(_alloc)
    , value1(0)
    , value2(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _operation_type;
  _operation_type operation;

   typedef int64_t _value1_type;
  _value1_type value1;

   typedef int64_t _value2_type;
  _value2_type value2;





  typedef boost::shared_ptr< ::client_server::calculateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::client_server::calculateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct calculateRequest_

typedef ::client_server::calculateRequest_<std::allocator<void> > calculateRequest;

typedef boost::shared_ptr< ::client_server::calculateRequest > calculateRequestPtr;
typedef boost::shared_ptr< ::client_server::calculateRequest const> calculateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::client_server::calculateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::client_server::calculateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace client_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'client_server': ['/home/complubot/Documents/POLLOTRON/CODE/ros/src/client_server/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::client_server::calculateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client_server::calculateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::client_server::calculateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::client_server::calculateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client_server::calculateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client_server::calculateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::client_server::calculateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0f8ef50d1afac2c867664742531f0ff";
  }

  static const char* value(const ::client_server::calculateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0f8ef50d1afac2cULL;
  static const uint64_t static_value2 = 0x867664742531f0ffULL;
};

template<class ContainerAllocator>
struct DataType< ::client_server::calculateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "client_server/calculateRequest";
  }

  static const char* value(const ::client_server::calculateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::client_server::calculateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string operation\n\
int64 value1\n\
int64 value2\n\
";
  }

  static const char* value(const ::client_server::calculateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::client_server::calculateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.operation);
      stream.next(m.value1);
      stream.next(m.value2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calculateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::client_server::calculateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::client_server::calculateRequest_<ContainerAllocator>& v)
  {
    s << indent << "operation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.operation);
    s << indent << "value1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.value1);
    s << indent << "value2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.value2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLIENT_SERVER_MESSAGE_CALCULATEREQUEST_H
