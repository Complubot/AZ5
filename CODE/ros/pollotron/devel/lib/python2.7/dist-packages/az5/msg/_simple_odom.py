# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from az5/simple_odom.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class simple_odom(genpy.Message):
  _md5sum = "22ab75215cf03e4c6396d04a16d3439c"
  _type = "az5/simple_odom"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float64 x_pos
float64 y_pos
float64 z_pos
float64 x_vel
float64 y_vel
float64 z_vel
"""
  __slots__ = ['x_pos','y_pos','z_pos','x_vel','y_vel','z_vel']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_pos,y_pos,z_pos,x_vel,y_vel,z_vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(simple_odom, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_pos is None:
        self.x_pos = 0.
      if self.y_pos is None:
        self.y_pos = 0.
      if self.z_pos is None:
        self.z_pos = 0.
      if self.x_vel is None:
        self.x_vel = 0.
      if self.y_vel is None:
        self.y_vel = 0.
      if self.z_vel is None:
        self.z_vel = 0.
    else:
      self.x_pos = 0.
      self.y_pos = 0.
      self.z_pos = 0.
      self.x_vel = 0.
      self.y_vel = 0.
      self.z_vel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.x_pos, _x.y_pos, _x.z_pos, _x.x_vel, _x.y_vel, _x.z_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.x_pos, _x.y_pos, _x.z_pos, _x.x_vel, _x.y_vel, _x.z_vel,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.x_pos, _x.y_pos, _x.z_pos, _x.x_vel, _x.y_vel, _x.z_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.x_pos, _x.y_pos, _x.z_pos, _x.x_vel, _x.y_vel, _x.z_vel,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
