// Generated by gencpp from file az5/motor_state.msg
// DO NOT EDIT!


#ifndef AZ5_MESSAGE_MOTOR_STATE_H
#define AZ5_MESSAGE_MOTOR_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace az5
{
template <class ContainerAllocator>
struct motor_state_
{
  typedef motor_state_<ContainerAllocator> Type;

  motor_state_()
    : M1(false)
    , M2(false)
    , M3(false)
    , M4(false)  {
    }
  motor_state_(const ContainerAllocator& _alloc)
    : M1(false)
    , M2(false)
    , M3(false)
    , M4(false)  {
  (void)_alloc;
    }



   typedef uint8_t _M1_type;
  _M1_type M1;

   typedef uint8_t _M2_type;
  _M2_type M2;

   typedef uint8_t _M3_type;
  _M3_type M3;

   typedef uint8_t _M4_type;
  _M4_type M4;





  typedef boost::shared_ptr< ::az5::motor_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::az5::motor_state_<ContainerAllocator> const> ConstPtr;

}; // struct motor_state_

typedef ::az5::motor_state_<std::allocator<void> > motor_state;

typedef boost::shared_ptr< ::az5::motor_state > motor_statePtr;
typedef boost::shared_ptr< ::az5::motor_state const> motor_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::az5::motor_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::az5::motor_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace az5

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'az5': ['/home/complubot/Documents/POLLOTRON/CODE/ros/pollotron/src/az5/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::az5::motor_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::az5::motor_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::az5::motor_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::az5::motor_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::az5::motor_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::az5::motor_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::az5::motor_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7108cdd472cdbecdeda4bfb217c695c";
  }

  static const char* value(const ::az5::motor_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7108cdd472cdbecULL;
  static const uint64_t static_value2 = 0xdeda4bfb217c695cULL;
};

template<class ContainerAllocator>
struct DataType< ::az5::motor_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "az5/motor_state";
  }

  static const char* value(const ::az5::motor_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::az5::motor_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool M1\n\
bool M2\n\
bool M3\n\
bool M4\n\
";
  }

  static const char* value(const ::az5::motor_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::az5::motor_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.M1);
      stream.next(m.M2);
      stream.next(m.M3);
      stream.next(m.M4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::az5::motor_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::az5::motor_state_<ContainerAllocator>& v)
  {
    s << indent << "M1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.M1);
    s << indent << "M2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.M2);
    s << indent << "M3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.M3);
    s << indent << "M4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.M4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AZ5_MESSAGE_MOTOR_STATE_H
