// Generated by gencpp from file realsense_ros_person/Pointing.msg
// DO NOT EDIT!


#ifndef REALSENSE_ROS_PERSON_MESSAGE_POINTING_H
#define REALSENSE_ROS_PERSON_MESSAGE_POINTING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Vector3.h>

namespace realsense_ros_person
{
template <class ContainerAllocator>
struct Pointing_
{
  typedef Pointing_<ContainerAllocator> Type;

  Pointing_()
    : confidence(0)
    , originColor()
    , originWorld()
    , orientationColor()
    , orientationWorld()  {
    }
  Pointing_(const ContainerAllocator& _alloc)
    : confidence(0)
    , originColor(_alloc)
    , originWorld(_alloc)
    , orientationColor(_alloc)
    , orientationWorld(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _confidence_type;
  _confidence_type confidence;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _originColor_type;
  _originColor_type originColor;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _originWorld_type;
  _originWorld_type originWorld;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _orientationColor_type;
  _orientationColor_type orientationColor;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _orientationWorld_type;
  _orientationWorld_type orientationWorld;





  typedef boost::shared_ptr< ::realsense_ros_person::Pointing_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_ros_person::Pointing_<ContainerAllocator> const> ConstPtr;

}; // struct Pointing_

typedef ::realsense_ros_person::Pointing_<std::allocator<void> > Pointing;

typedef boost::shared_ptr< ::realsense_ros_person::Pointing > PointingPtr;
typedef boost::shared_ptr< ::realsense_ros_person::Pointing const> PointingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_ros_person::Pointing_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_ros_person::Pointing_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace realsense_ros_person

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'realsense_ros_person': ['/home/complubot/Documents/POLLOTRON/CODE/ros/realsense_examples/src/realsense_samples_ros/realsense_ros_person/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::realsense_ros_person::Pointing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_ros_person::Pointing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_ros_person::Pointing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_ros_person::Pointing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_ros_person::Pointing_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_ros_person::Pointing_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_ros_person::Pointing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8e17bba059ae94c10bd49b0a03744e0";
  }

  static const char* value(const ::realsense_ros_person::Pointing_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8e17bba059ae94cULL;
  static const uint64_t static_value2 = 0x10bd49b0a03744e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_ros_person::Pointing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_ros_person/Pointing";
  }

  static const char* value(const ::realsense_ros_person::Pointing_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_ros_person::Pointing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 confidence\n\
geometry_msgs/Point32 originColor\n\
geometry_msgs/Point32 originWorld\n\
geometry_msgs/Point32 orientationColor\n\
geometry_msgs/Vector3 orientationWorld\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::realsense_ros_person::Pointing_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_ros_person::Pointing_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.confidence);
      stream.next(m.originColor);
      stream.next(m.originWorld);
      stream.next(m.orientationColor);
      stream.next(m.orientationWorld);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pointing_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_ros_person::Pointing_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_ros_person::Pointing_<ContainerAllocator>& v)
  {
    s << indent << "confidence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.confidence);
    s << indent << "originColor: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.originColor);
    s << indent << "originWorld: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.originWorld);
    s << indent << "orientationColor: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.orientationColor);
    s << indent << "orientationWorld: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.orientationWorld);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_ROS_PERSON_MESSAGE_POINTING_H
