// Generated by gencpp from file realsense_ros_person/Landmark.msg
// DO NOT EDIT!


#ifndef REALSENSE_ROS_PERSON_MESSAGE_LANDMARK_H
#define REALSENSE_ROS_PERSON_MESSAGE_LANDMARK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point32.h>

namespace realsense_ros_person
{
template <class ContainerAllocator>
struct Landmark_
{
  typedef Landmark_<ContainerAllocator> Type;

  Landmark_()
    : location()
    , realWorldCoordinates()  {
    }
  Landmark_(const ContainerAllocator& _alloc)
    : location(_alloc)
    , realWorldCoordinates(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _realWorldCoordinates_type;
  _realWorldCoordinates_type realWorldCoordinates;





  typedef boost::shared_ptr< ::realsense_ros_person::Landmark_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_ros_person::Landmark_<ContainerAllocator> const> ConstPtr;

}; // struct Landmark_

typedef ::realsense_ros_person::Landmark_<std::allocator<void> > Landmark;

typedef boost::shared_ptr< ::realsense_ros_person::Landmark > LandmarkPtr;
typedef boost::shared_ptr< ::realsense_ros_person::Landmark const> LandmarkConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_ros_person::Landmark_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_ros_person::Landmark_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace realsense_ros_person

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'realsense_ros_person': ['/home/complubot/Documents/POLLOTRON/CODE/ros/realsense_examples/src/realsense_samples_ros/realsense_ros_person/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::realsense_ros_person::Landmark_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_ros_person::Landmark_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_ros_person::Landmark_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_ros_person::Landmark_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_ros_person::Landmark_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_ros_person::Landmark_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_ros_person::Landmark_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40b8559cad6d27176fd0a970412b03f0";
  }

  static const char* value(const ::realsense_ros_person::Landmark_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40b8559cad6d2717ULL;
  static const uint64_t static_value2 = 0x6fd0a970412b03f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_ros_person::Landmark_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_ros_person/Landmark";
  }

  static const char* value(const ::realsense_ros_person::Landmark_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_ros_person::Landmark_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point location\n\
geometry_msgs/Point32 realWorldCoordinates\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::realsense_ros_person::Landmark_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_ros_person::Landmark_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location);
      stream.next(m.realWorldCoordinates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Landmark_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_ros_person::Landmark_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_ros_person::Landmark_<ContainerAllocator>& v)
  {
    s << indent << "location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "realWorldCoordinates: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.realWorldCoordinates);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_ROS_PERSON_MESSAGE_LANDMARK_H
