// Generated by gencpp from file realsense_ros_person/User.msg
// DO NOT EDIT!


#ifndef REALSENSE_ROS_PERSON_MESSAGE_USER_H
#define REALSENSE_ROS_PERSON_MESSAGE_USER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <realsense_ros_person/UserInfo.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <realsense_ros_person/RectWithConfidence.h>
#include <realsense_ros_person/RectWithConfidence.h>
#include <realsense_ros_person/LandmarksInfo.h>
#include <realsense_ros_person/EulerAnglesWithConfidence.h>
#include <realsense_ros_person/SkeletonJoint.h>
#include <realsense_ros_person/Gestures.h>

namespace realsense_ros_person
{
template <class ContainerAllocator>
struct User_
{
  typedef User_<ContainerAllocator> Type;

  User_()
    : userInfo()
    , centerOfMassImage()
    , centerOfMassWorld()
    , userRect()
    , headBoundingBox()
    , landmarksInfo()
    , headPose()
    , skeletonJoints()
    , gestures()  {
    }
  User_(const ContainerAllocator& _alloc)
    : userInfo(_alloc)
    , centerOfMassImage(_alloc)
    , centerOfMassWorld(_alloc)
    , userRect(_alloc)
    , headBoundingBox(_alloc)
    , landmarksInfo(_alloc)
    , headPose(_alloc)
    , skeletonJoints(_alloc)
    , gestures(_alloc)  {
  (void)_alloc;
    }



   typedef  ::realsense_ros_person::UserInfo_<ContainerAllocator>  _userInfo_type;
  _userInfo_type userInfo;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _centerOfMassImage_type;
  _centerOfMassImage_type centerOfMassImage;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _centerOfMassWorld_type;
  _centerOfMassWorld_type centerOfMassWorld;

   typedef  ::realsense_ros_person::RectWithConfidence_<ContainerAllocator>  _userRect_type;
  _userRect_type userRect;

   typedef  ::realsense_ros_person::RectWithConfidence_<ContainerAllocator>  _headBoundingBox_type;
  _headBoundingBox_type headBoundingBox;

   typedef  ::realsense_ros_person::LandmarksInfo_<ContainerAllocator>  _landmarksInfo_type;
  _landmarksInfo_type landmarksInfo;

   typedef  ::realsense_ros_person::EulerAnglesWithConfidence_<ContainerAllocator>  _headPose_type;
  _headPose_type headPose;

   typedef std::vector< ::realsense_ros_person::SkeletonJoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::realsense_ros_person::SkeletonJoint_<ContainerAllocator> >::other >  _skeletonJoints_type;
  _skeletonJoints_type skeletonJoints;

   typedef  ::realsense_ros_person::Gestures_<ContainerAllocator>  _gestures_type;
  _gestures_type gestures;





  typedef boost::shared_ptr< ::realsense_ros_person::User_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_ros_person::User_<ContainerAllocator> const> ConstPtr;

}; // struct User_

typedef ::realsense_ros_person::User_<std::allocator<void> > User;

typedef boost::shared_ptr< ::realsense_ros_person::User > UserPtr;
typedef boost::shared_ptr< ::realsense_ros_person::User const> UserConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_ros_person::User_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_ros_person::User_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace realsense_ros_person

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'realsense_ros_person': ['/home/complubot/Documents/POLLOTRON/CODE/ros/realsense_examples/src/realsense_samples_ros/realsense_ros_person/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::realsense_ros_person::User_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_ros_person::User_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_ros_person::User_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_ros_person::User_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_ros_person::User_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_ros_person::User_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_ros_person::User_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6686a133e9edf3243aaa058301a3c9c6";
  }

  static const char* value(const ::realsense_ros_person::User_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6686a133e9edf324ULL;
  static const uint64_t static_value2 = 0x3aaa058301a3c9c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_ros_person::User_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_ros_person/User";
  }

  static const char* value(const ::realsense_ros_person::User_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_ros_person::User_<ContainerAllocator> >
{
  static const char* value()
  {
    return "UserInfo userInfo\n\
geometry_msgs/Point32 centerOfMassImage\n\
geometry_msgs/Point32 centerOfMassWorld\n\
RectWithConfidence userRect\n\
RectWithConfidence headBoundingBox\n\
LandmarksInfo landmarksInfo\n\
EulerAnglesWithConfidence headPose\n\
SkeletonJoint[] skeletonJoints\n\
Gestures gestures\n\
\n\
\n\
================================================================================\n\
MSG: realsense_ros_person/UserInfo\n\
int32 Id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: realsense_ros_person/RectWithConfidence\n\
int32 confidence\n\
geometry_msgs/Point32[2] rectCorners\n\
\n\
================================================================================\n\
MSG: realsense_ros_person/LandmarksInfo\n\
int32 confidence\n\
Landmark[] landmarks\n\
\n\
================================================================================\n\
MSG: realsense_ros_person/Landmark\n\
geometry_msgs/Point location\n\
geometry_msgs/Point32 realWorldCoordinates\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: realsense_ros_person/EulerAnglesWithConfidence\n\
EulerAngles angles\n\
int32 confidence\n\
\n\
================================================================================\n\
MSG: realsense_ros_person/EulerAngles\n\
float32 pitch\n\
float32 roll\n\
float32 yaw\n\
\n\
================================================================================\n\
MSG: realsense_ros_person/SkeletonJoint\n\
int32 type\n\
float32 confidence\n\
geometry_msgs/Point location\n\
geometry_msgs/Point32 realWorldCoordinates\n\
\n\
#joint types constants\n\
int32 JOINT_ANKLE_LEFT=0\n\
int32 JOINT_ANKLE_RIGHT=1\n\
int32 JOINT_ELBOW_LEFT=2\n\
int32 JOINT_ELBOW_RIGHT=3\n\
int32 JOINT_FOOT_LEFT=4\n\
int32 JOINT_FOOT_RIGHT=5\n\
int32 JOINT_HAND_LEFT=6\n\
int32 JOINT_HAND_RIGHT=7\n\
int32 JOINT_HAND_TIP_LEFT=8\n\
int32 JOINT_HAND_TIP_RIGHT=9\n\
int32 JOINT_HEAD=10\n\
int32 JOINT_HIP_LEFT=11\n\
int32 JOINT_HIP_RIGHT=12\n\
int32 JOINT_KNEE_LEFT=13\n\
int32 JOINT_KNEE_RIGHT=14\n\
int32 JOINT_NECK=15\n\
int32 JOINT_SHOULDER_LEFT=16\n\
int32 JOINT_SHOULDER_RIGHT=17\n\
int32 JOINT_SPINE_BASE=18\n\
int32 JOINT_SPINE_MID=19\n\
int32 JOINT_SPINE_SHOULDER=20\n\
int32 JOINT_THUMB_LEFT=21\n\
int32 JOINT_THUMB_RIGHT=22\n\
int32 JOINT_WRIST_LEFT=23\n\
int32 JOINT_WRIST_RIGHT=24\n\
int32 JOINT_UNKNOWN=25\n\
\n\
================================================================================\n\
MSG: realsense_ros_person/Gestures\n\
Pointing pointing\n\
Wave wave\n\
\n\
================================================================================\n\
MSG: realsense_ros_person/Pointing\n\
int32 confidence\n\
geometry_msgs/Point32 originColor\n\
geometry_msgs/Point32 originWorld\n\
geometry_msgs/Point32 orientationColor\n\
geometry_msgs/Vector3 orientationWorld\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: realsense_ros_person/Wave\n\
int32 type\n\
\n\
#Wave gesture types\n\
int32 WAVE_NOT_DETECTED=-1 # Wave not detected \n\
int32 WAVE_LEFT_LA=1       # Wave ended with hand motion to the left, in the left area\n\
int32 WAVE_RIGHT_LA=2      # Wave ended with hand motion to the right, in the left area\n\
int32 WAVE_LEFT_RA=3       # Wave ended with hand motion to the left, in the right area\n\
int32 WAVE_RIGHT_RA=4      # Wave ended with hand motion to the right, in the right area\n\
\n\
";
  }

  static const char* value(const ::realsense_ros_person::User_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_ros_person::User_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.userInfo);
      stream.next(m.centerOfMassImage);
      stream.next(m.centerOfMassWorld);
      stream.next(m.userRect);
      stream.next(m.headBoundingBox);
      stream.next(m.landmarksInfo);
      stream.next(m.headPose);
      stream.next(m.skeletonJoints);
      stream.next(m.gestures);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct User_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_ros_person::User_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_ros_person::User_<ContainerAllocator>& v)
  {
    s << indent << "userInfo: ";
    s << std::endl;
    Printer< ::realsense_ros_person::UserInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.userInfo);
    s << indent << "centerOfMassImage: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.centerOfMassImage);
    s << indent << "centerOfMassWorld: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.centerOfMassWorld);
    s << indent << "userRect: ";
    s << std::endl;
    Printer< ::realsense_ros_person::RectWithConfidence_<ContainerAllocator> >::stream(s, indent + "  ", v.userRect);
    s << indent << "headBoundingBox: ";
    s << std::endl;
    Printer< ::realsense_ros_person::RectWithConfidence_<ContainerAllocator> >::stream(s, indent + "  ", v.headBoundingBox);
    s << indent << "landmarksInfo: ";
    s << std::endl;
    Printer< ::realsense_ros_person::LandmarksInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.landmarksInfo);
    s << indent << "headPose: ";
    s << std::endl;
    Printer< ::realsense_ros_person::EulerAnglesWithConfidence_<ContainerAllocator> >::stream(s, indent + "  ", v.headPose);
    s << indent << "skeletonJoints[]" << std::endl;
    for (size_t i = 0; i < v.skeletonJoints.size(); ++i)
    {
      s << indent << "  skeletonJoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::realsense_ros_person::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "    ", v.skeletonJoints[i]);
    }
    s << indent << "gestures: ";
    s << std::endl;
    Printer< ::realsense_ros_person::Gestures_<ContainerAllocator> >::stream(s, indent + "  ", v.gestures);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_ROS_PERSON_MESSAGE_USER_H
