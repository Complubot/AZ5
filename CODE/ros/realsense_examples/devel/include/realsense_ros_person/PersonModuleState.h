// Generated by gencpp from file realsense_ros_person/PersonModuleState.msg
// DO NOT EDIT!


#ifndef REALSENSE_ROS_PERSON_MESSAGE_PERSONMODULESTATE_H
#define REALSENSE_ROS_PERSON_MESSAGE_PERSONMODULESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace realsense_ros_person
{
template <class ContainerAllocator>
struct PersonModuleState_
{
  typedef PersonModuleState_<ContainerAllocator> Type;

  PersonModuleState_()
    : isRecognitionEnabled(false)
    , isSkeletonEnabled(false)
    , isGesturesEnabled(false)
    , isLandmarksEnabled(false)
    , isHeadBoundingBoxEnabled(false)
    , isHeadPoseEnabled(false)
    , isTrackingEnabled(false)
    , trackingState(0)  {
    }
  PersonModuleState_(const ContainerAllocator& _alloc)
    : isRecognitionEnabled(false)
    , isSkeletonEnabled(false)
    , isGesturesEnabled(false)
    , isLandmarksEnabled(false)
    , isHeadBoundingBoxEnabled(false)
    , isHeadPoseEnabled(false)
    , isTrackingEnabled(false)
    , trackingState(0)  {
  (void)_alloc;
    }



   typedef uint8_t _isRecognitionEnabled_type;
  _isRecognitionEnabled_type isRecognitionEnabled;

   typedef uint8_t _isSkeletonEnabled_type;
  _isSkeletonEnabled_type isSkeletonEnabled;

   typedef uint8_t _isGesturesEnabled_type;
  _isGesturesEnabled_type isGesturesEnabled;

   typedef uint8_t _isLandmarksEnabled_type;
  _isLandmarksEnabled_type isLandmarksEnabled;

   typedef uint8_t _isHeadBoundingBoxEnabled_type;
  _isHeadBoundingBoxEnabled_type isHeadBoundingBoxEnabled;

   typedef uint8_t _isHeadPoseEnabled_type;
  _isHeadPoseEnabled_type isHeadPoseEnabled;

   typedef uint8_t _isTrackingEnabled_type;
  _isTrackingEnabled_type isTrackingEnabled;

   typedef int32_t _trackingState_type;
  _trackingState_type trackingState;



  enum {
    TRACKING_STATE_TRACKING = 0,
    TRACKING_STATE_DETECTING = 1,
  };


  typedef boost::shared_ptr< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> const> ConstPtr;

}; // struct PersonModuleState_

typedef ::realsense_ros_person::PersonModuleState_<std::allocator<void> > PersonModuleState;

typedef boost::shared_ptr< ::realsense_ros_person::PersonModuleState > PersonModuleStatePtr;
typedef boost::shared_ptr< ::realsense_ros_person::PersonModuleState const> PersonModuleStateConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_ros_person::PersonModuleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace realsense_ros_person

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'realsense_ros_person': ['/home/complubot/Documents/POLLOTRON/CODE/ros/realsense_examples/src/realsense_samples_ros/realsense_ros_person/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a004989fab301fe2ac94f9cab839eaed";
  }

  static const char* value(const ::realsense_ros_person::PersonModuleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa004989fab301fe2ULL;
  static const uint64_t static_value2 = 0xac94f9cab839eaedULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_ros_person/PersonModuleState";
  }

  static const char* value(const ::realsense_ros_person::PersonModuleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#features enables/disabled states\n\
bool isRecognitionEnabled\n\
bool isSkeletonEnabled\n\
bool isGesturesEnabled\n\
bool isLandmarksEnabled\n\
bool isHeadBoundingBoxEnabled\n\
bool isHeadPoseEnabled\n\
bool isTrackingEnabled\n\
\n\
#additional states\n\
int32 trackingState\n\
\n\
int32 TRACKING_STATE_TRACKING=0\n\
int32 TRACKING_STATE_DETECTING=1\n\
";
  }

  static const char* value(const ::realsense_ros_person::PersonModuleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isRecognitionEnabled);
      stream.next(m.isSkeletonEnabled);
      stream.next(m.isGesturesEnabled);
      stream.next(m.isLandmarksEnabled);
      stream.next(m.isHeadBoundingBoxEnabled);
      stream.next(m.isHeadPoseEnabled);
      stream.next(m.isTrackingEnabled);
      stream.next(m.trackingState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PersonModuleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_ros_person::PersonModuleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_ros_person::PersonModuleState_<ContainerAllocator>& v)
  {
    s << indent << "isRecognitionEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isRecognitionEnabled);
    s << indent << "isSkeletonEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isSkeletonEnabled);
    s << indent << "isGesturesEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isGesturesEnabled);
    s << indent << "isLandmarksEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isLandmarksEnabled);
    s << indent << "isHeadBoundingBoxEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isHeadBoundingBoxEnabled);
    s << indent << "isHeadPoseEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isHeadPoseEnabled);
    s << indent << "isTrackingEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isTrackingEnabled);
    s << indent << "trackingState: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trackingState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_ROS_PERSON_MESSAGE_PERSONMODULESTATE_H
