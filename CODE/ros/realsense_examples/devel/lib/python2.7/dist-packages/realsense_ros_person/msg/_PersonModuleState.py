# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_ros_person/PersonModuleState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PersonModuleState(genpy.Message):
  _md5sum = "a004989fab301fe2ac94f9cab839eaed"
  _type = "realsense_ros_person/PersonModuleState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#features enables/disabled states
bool isRecognitionEnabled
bool isSkeletonEnabled
bool isGesturesEnabled
bool isLandmarksEnabled
bool isHeadBoundingBoxEnabled
bool isHeadPoseEnabled
bool isTrackingEnabled

#additional states
int32 trackingState

int32 TRACKING_STATE_TRACKING=0
int32 TRACKING_STATE_DETECTING=1
"""
  # Pseudo-constants
  TRACKING_STATE_TRACKING = 0
  TRACKING_STATE_DETECTING = 1

  __slots__ = ['isRecognitionEnabled','isSkeletonEnabled','isGesturesEnabled','isLandmarksEnabled','isHeadBoundingBoxEnabled','isHeadPoseEnabled','isTrackingEnabled','trackingState']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isRecognitionEnabled,isSkeletonEnabled,isGesturesEnabled,isLandmarksEnabled,isHeadBoundingBoxEnabled,isHeadPoseEnabled,isTrackingEnabled,trackingState

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PersonModuleState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.isRecognitionEnabled is None:
        self.isRecognitionEnabled = False
      if self.isSkeletonEnabled is None:
        self.isSkeletonEnabled = False
      if self.isGesturesEnabled is None:
        self.isGesturesEnabled = False
      if self.isLandmarksEnabled is None:
        self.isLandmarksEnabled = False
      if self.isHeadBoundingBoxEnabled is None:
        self.isHeadBoundingBoxEnabled = False
      if self.isHeadPoseEnabled is None:
        self.isHeadPoseEnabled = False
      if self.isTrackingEnabled is None:
        self.isTrackingEnabled = False
      if self.trackingState is None:
        self.trackingState = 0
    else:
      self.isRecognitionEnabled = False
      self.isSkeletonEnabled = False
      self.isGesturesEnabled = False
      self.isLandmarksEnabled = False
      self.isHeadBoundingBoxEnabled = False
      self.isHeadPoseEnabled = False
      self.isTrackingEnabled = False
      self.trackingState = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7Bi().pack(_x.isRecognitionEnabled, _x.isSkeletonEnabled, _x.isGesturesEnabled, _x.isLandmarksEnabled, _x.isHeadBoundingBoxEnabled, _x.isHeadPoseEnabled, _x.isTrackingEnabled, _x.trackingState))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.isRecognitionEnabled, _x.isSkeletonEnabled, _x.isGesturesEnabled, _x.isLandmarksEnabled, _x.isHeadBoundingBoxEnabled, _x.isHeadPoseEnabled, _x.isTrackingEnabled, _x.trackingState,) = _get_struct_7Bi().unpack(str[start:end])
      self.isRecognitionEnabled = bool(self.isRecognitionEnabled)
      self.isSkeletonEnabled = bool(self.isSkeletonEnabled)
      self.isGesturesEnabled = bool(self.isGesturesEnabled)
      self.isLandmarksEnabled = bool(self.isLandmarksEnabled)
      self.isHeadBoundingBoxEnabled = bool(self.isHeadBoundingBoxEnabled)
      self.isHeadPoseEnabled = bool(self.isHeadPoseEnabled)
      self.isTrackingEnabled = bool(self.isTrackingEnabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7Bi().pack(_x.isRecognitionEnabled, _x.isSkeletonEnabled, _x.isGesturesEnabled, _x.isLandmarksEnabled, _x.isHeadBoundingBoxEnabled, _x.isHeadPoseEnabled, _x.isTrackingEnabled, _x.trackingState))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.isRecognitionEnabled, _x.isSkeletonEnabled, _x.isGesturesEnabled, _x.isLandmarksEnabled, _x.isHeadBoundingBoxEnabled, _x.isHeadPoseEnabled, _x.isTrackingEnabled, _x.trackingState,) = _get_struct_7Bi().unpack(str[start:end])
      self.isRecognitionEnabled = bool(self.isRecognitionEnabled)
      self.isSkeletonEnabled = bool(self.isSkeletonEnabled)
      self.isGesturesEnabled = bool(self.isGesturesEnabled)
      self.isLandmarksEnabled = bool(self.isLandmarksEnabled)
      self.isHeadBoundingBoxEnabled = bool(self.isHeadBoundingBoxEnabled)
      self.isHeadPoseEnabled = bool(self.isHeadPoseEnabled)
      self.isTrackingEnabled = bool(self.isTrackingEnabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7Bi = None
def _get_struct_7Bi():
    global _struct_7Bi
    if _struct_7Bi is None:
        _struct_7Bi = struct.Struct("<7Bi")
    return _struct_7Bi
