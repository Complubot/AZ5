# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_ros_person/Pointing.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Pointing(genpy.Message):
  _md5sum = "e8e17bba059ae94c10bd49b0a03744e0"
  _type = "realsense_ros_person/Pointing"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 confidence
geometry_msgs/Point32 originColor
geometry_msgs/Point32 originWorld
geometry_msgs/Point32 orientationColor
geometry_msgs/Vector3 orientationWorld

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['confidence','originColor','originWorld','orientationColor','orientationWorld']
  _slot_types = ['int32','geometry_msgs/Point32','geometry_msgs/Point32','geometry_msgs/Point32','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       confidence,originColor,originWorld,orientationColor,orientationWorld

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pointing, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.confidence is None:
        self.confidence = 0
      if self.originColor is None:
        self.originColor = geometry_msgs.msg.Point32()
      if self.originWorld is None:
        self.originWorld = geometry_msgs.msg.Point32()
      if self.orientationColor is None:
        self.orientationColor = geometry_msgs.msg.Point32()
      if self.orientationWorld is None:
        self.orientationWorld = geometry_msgs.msg.Vector3()
    else:
      self.confidence = 0
      self.originColor = geometry_msgs.msg.Point32()
      self.originWorld = geometry_msgs.msg.Point32()
      self.orientationColor = geometry_msgs.msg.Point32()
      self.orientationWorld = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i9f3d().pack(_x.confidence, _x.originColor.x, _x.originColor.y, _x.originColor.z, _x.originWorld.x, _x.originWorld.y, _x.originWorld.z, _x.orientationColor.x, _x.orientationColor.y, _x.orientationColor.z, _x.orientationWorld.x, _x.orientationWorld.y, _x.orientationWorld.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.originColor is None:
        self.originColor = geometry_msgs.msg.Point32()
      if self.originWorld is None:
        self.originWorld = geometry_msgs.msg.Point32()
      if self.orientationColor is None:
        self.orientationColor = geometry_msgs.msg.Point32()
      if self.orientationWorld is None:
        self.orientationWorld = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.confidence, _x.originColor.x, _x.originColor.y, _x.originColor.z, _x.originWorld.x, _x.originWorld.y, _x.originWorld.z, _x.orientationColor.x, _x.orientationColor.y, _x.orientationColor.z, _x.orientationWorld.x, _x.orientationWorld.y, _x.orientationWorld.z,) = _get_struct_i9f3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i9f3d().pack(_x.confidence, _x.originColor.x, _x.originColor.y, _x.originColor.z, _x.originWorld.x, _x.originWorld.y, _x.originWorld.z, _x.orientationColor.x, _x.orientationColor.y, _x.orientationColor.z, _x.orientationWorld.x, _x.orientationWorld.y, _x.orientationWorld.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.originColor is None:
        self.originColor = geometry_msgs.msg.Point32()
      if self.originWorld is None:
        self.originWorld = geometry_msgs.msg.Point32()
      if self.orientationColor is None:
        self.orientationColor = geometry_msgs.msg.Point32()
      if self.orientationWorld is None:
        self.orientationWorld = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.confidence, _x.originColor.x, _x.originColor.y, _x.originColor.z, _x.originWorld.x, _x.originWorld.y, _x.originWorld.z, _x.orientationColor.x, _x.orientationColor.y, _x.orientationColor.z, _x.orientationWorld.x, _x.orientationWorld.y, _x.orientationWorld.z,) = _get_struct_i9f3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i9f3d = None
def _get_struct_i9f3d():
    global _struct_i9f3d
    if _struct_i9f3d is None:
        _struct_i9f3d = struct.Struct("<i9f3d")
    return _struct_i9f3d
