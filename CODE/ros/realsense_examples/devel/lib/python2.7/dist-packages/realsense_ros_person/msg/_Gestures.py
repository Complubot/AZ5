# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_ros_person/Gestures.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import realsense_ros_person.msg
import geometry_msgs.msg

class Gestures(genpy.Message):
  _md5sum = "d3676ee03e8d847bc8d129f9b683163e"
  _type = "realsense_ros_person/Gestures"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Pointing pointing
Wave wave

================================================================================
MSG: realsense_ros_person/Pointing
int32 confidence
geometry_msgs/Point32 originColor
geometry_msgs/Point32 originWorld
geometry_msgs/Point32 orientationColor
geometry_msgs/Vector3 orientationWorld

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: realsense_ros_person/Wave
int32 type

#Wave gesture types
int32 WAVE_NOT_DETECTED=-1 # Wave not detected 
int32 WAVE_LEFT_LA=1       # Wave ended with hand motion to the left, in the left area
int32 WAVE_RIGHT_LA=2      # Wave ended with hand motion to the right, in the left area
int32 WAVE_LEFT_RA=3       # Wave ended with hand motion to the left, in the right area
int32 WAVE_RIGHT_RA=4      # Wave ended with hand motion to the right, in the right area

"""
  __slots__ = ['pointing','wave']
  _slot_types = ['realsense_ros_person/Pointing','realsense_ros_person/Wave']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pointing,wave

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gestures, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pointing is None:
        self.pointing = realsense_ros_person.msg.Pointing()
      if self.wave is None:
        self.wave = realsense_ros_person.msg.Wave()
    else:
      self.pointing = realsense_ros_person.msg.Pointing()
      self.wave = realsense_ros_person.msg.Wave()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i9f3di().pack(_x.pointing.confidence, _x.pointing.originColor.x, _x.pointing.originColor.y, _x.pointing.originColor.z, _x.pointing.originWorld.x, _x.pointing.originWorld.y, _x.pointing.originWorld.z, _x.pointing.orientationColor.x, _x.pointing.orientationColor.y, _x.pointing.orientationColor.z, _x.pointing.orientationWorld.x, _x.pointing.orientationWorld.y, _x.pointing.orientationWorld.z, _x.wave.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pointing is None:
        self.pointing = realsense_ros_person.msg.Pointing()
      if self.wave is None:
        self.wave = realsense_ros_person.msg.Wave()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.pointing.confidence, _x.pointing.originColor.x, _x.pointing.originColor.y, _x.pointing.originColor.z, _x.pointing.originWorld.x, _x.pointing.originWorld.y, _x.pointing.originWorld.z, _x.pointing.orientationColor.x, _x.pointing.orientationColor.y, _x.pointing.orientationColor.z, _x.pointing.orientationWorld.x, _x.pointing.orientationWorld.y, _x.pointing.orientationWorld.z, _x.wave.type,) = _get_struct_i9f3di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i9f3di().pack(_x.pointing.confidence, _x.pointing.originColor.x, _x.pointing.originColor.y, _x.pointing.originColor.z, _x.pointing.originWorld.x, _x.pointing.originWorld.y, _x.pointing.originWorld.z, _x.pointing.orientationColor.x, _x.pointing.orientationColor.y, _x.pointing.orientationColor.z, _x.pointing.orientationWorld.x, _x.pointing.orientationWorld.y, _x.pointing.orientationWorld.z, _x.wave.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pointing is None:
        self.pointing = realsense_ros_person.msg.Pointing()
      if self.wave is None:
        self.wave = realsense_ros_person.msg.Wave()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.pointing.confidence, _x.pointing.originColor.x, _x.pointing.originColor.y, _x.pointing.originColor.z, _x.pointing.originWorld.x, _x.pointing.originWorld.y, _x.pointing.originWorld.z, _x.pointing.orientationColor.x, _x.pointing.orientationColor.y, _x.pointing.orientationColor.z, _x.pointing.orientationWorld.x, _x.pointing.orientationWorld.y, _x.pointing.orientationWorld.z, _x.wave.type,) = _get_struct_i9f3di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i9f3di = None
def _get_struct_i9f3di():
    global _struct_i9f3di
    if _struct_i9f3di is None:
        _struct_i9f3di = struct.Struct("<i9f3di")
    return _struct_i9f3di
