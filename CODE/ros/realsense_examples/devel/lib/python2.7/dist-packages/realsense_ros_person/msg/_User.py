# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_ros_person/User.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import realsense_ros_person.msg
import geometry_msgs.msg

class User(genpy.Message):
  _md5sum = "6686a133e9edf3243aaa058301a3c9c6"
  _type = "realsense_ros_person/User"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """UserInfo userInfo
geometry_msgs/Point32 centerOfMassImage
geometry_msgs/Point32 centerOfMassWorld
RectWithConfidence userRect
RectWithConfidence headBoundingBox
LandmarksInfo landmarksInfo
EulerAnglesWithConfidence headPose
SkeletonJoint[] skeletonJoints
Gestures gestures


================================================================================
MSG: realsense_ros_person/UserInfo
int32 Id

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: realsense_ros_person/RectWithConfidence
int32 confidence
geometry_msgs/Point32[2] rectCorners

================================================================================
MSG: realsense_ros_person/LandmarksInfo
int32 confidence
Landmark[] landmarks

================================================================================
MSG: realsense_ros_person/Landmark
geometry_msgs/Point location
geometry_msgs/Point32 realWorldCoordinates

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: realsense_ros_person/EulerAnglesWithConfidence
EulerAngles angles
int32 confidence

================================================================================
MSG: realsense_ros_person/EulerAngles
float32 pitch
float32 roll
float32 yaw

================================================================================
MSG: realsense_ros_person/SkeletonJoint
int32 type
float32 confidence
geometry_msgs/Point location
geometry_msgs/Point32 realWorldCoordinates

#joint types constants
int32 JOINT_ANKLE_LEFT=0
int32 JOINT_ANKLE_RIGHT=1
int32 JOINT_ELBOW_LEFT=2
int32 JOINT_ELBOW_RIGHT=3
int32 JOINT_FOOT_LEFT=4
int32 JOINT_FOOT_RIGHT=5
int32 JOINT_HAND_LEFT=6
int32 JOINT_HAND_RIGHT=7
int32 JOINT_HAND_TIP_LEFT=8
int32 JOINT_HAND_TIP_RIGHT=9
int32 JOINT_HEAD=10
int32 JOINT_HIP_LEFT=11
int32 JOINT_HIP_RIGHT=12
int32 JOINT_KNEE_LEFT=13
int32 JOINT_KNEE_RIGHT=14
int32 JOINT_NECK=15
int32 JOINT_SHOULDER_LEFT=16
int32 JOINT_SHOULDER_RIGHT=17
int32 JOINT_SPINE_BASE=18
int32 JOINT_SPINE_MID=19
int32 JOINT_SPINE_SHOULDER=20
int32 JOINT_THUMB_LEFT=21
int32 JOINT_THUMB_RIGHT=22
int32 JOINT_WRIST_LEFT=23
int32 JOINT_WRIST_RIGHT=24
int32 JOINT_UNKNOWN=25

================================================================================
MSG: realsense_ros_person/Gestures
Pointing pointing
Wave wave

================================================================================
MSG: realsense_ros_person/Pointing
int32 confidence
geometry_msgs/Point32 originColor
geometry_msgs/Point32 originWorld
geometry_msgs/Point32 orientationColor
geometry_msgs/Vector3 orientationWorld

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: realsense_ros_person/Wave
int32 type

#Wave gesture types
int32 WAVE_NOT_DETECTED=-1 # Wave not detected 
int32 WAVE_LEFT_LA=1       # Wave ended with hand motion to the left, in the left area
int32 WAVE_RIGHT_LA=2      # Wave ended with hand motion to the right, in the left area
int32 WAVE_LEFT_RA=3       # Wave ended with hand motion to the left, in the right area
int32 WAVE_RIGHT_RA=4      # Wave ended with hand motion to the right, in the right area

"""
  __slots__ = ['userInfo','centerOfMassImage','centerOfMassWorld','userRect','headBoundingBox','landmarksInfo','headPose','skeletonJoints','gestures']
  _slot_types = ['realsense_ros_person/UserInfo','geometry_msgs/Point32','geometry_msgs/Point32','realsense_ros_person/RectWithConfidence','realsense_ros_person/RectWithConfidence','realsense_ros_person/LandmarksInfo','realsense_ros_person/EulerAnglesWithConfidence','realsense_ros_person/SkeletonJoint[]','realsense_ros_person/Gestures']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       userInfo,centerOfMassImage,centerOfMassWorld,userRect,headBoundingBox,landmarksInfo,headPose,skeletonJoints,gestures

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(User, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.userInfo is None:
        self.userInfo = realsense_ros_person.msg.UserInfo()
      if self.centerOfMassImage is None:
        self.centerOfMassImage = geometry_msgs.msg.Point32()
      if self.centerOfMassWorld is None:
        self.centerOfMassWorld = geometry_msgs.msg.Point32()
      if self.userRect is None:
        self.userRect = realsense_ros_person.msg.RectWithConfidence()
      if self.headBoundingBox is None:
        self.headBoundingBox = realsense_ros_person.msg.RectWithConfidence()
      if self.landmarksInfo is None:
        self.landmarksInfo = realsense_ros_person.msg.LandmarksInfo()
      if self.headPose is None:
        self.headPose = realsense_ros_person.msg.EulerAnglesWithConfidence()
      if self.skeletonJoints is None:
        self.skeletonJoints = []
      if self.gestures is None:
        self.gestures = realsense_ros_person.msg.Gestures()
    else:
      self.userInfo = realsense_ros_person.msg.UserInfo()
      self.centerOfMassImage = geometry_msgs.msg.Point32()
      self.centerOfMassWorld = geometry_msgs.msg.Point32()
      self.userRect = realsense_ros_person.msg.RectWithConfidence()
      self.headBoundingBox = realsense_ros_person.msg.RectWithConfidence()
      self.landmarksInfo = realsense_ros_person.msg.LandmarksInfo()
      self.headPose = realsense_ros_person.msg.EulerAnglesWithConfidence()
      self.skeletonJoints = []
      self.gestures = realsense_ros_person.msg.Gestures()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i6fi().pack(_x.userInfo.Id, _x.centerOfMassImage.x, _x.centerOfMassImage.y, _x.centerOfMassImage.z, _x.centerOfMassWorld.x, _x.centerOfMassWorld.y, _x.centerOfMassWorld.z, _x.userRect.confidence))
      for val1 in self.userRect.rectCorners:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_i().pack(self.headBoundingBox.confidence))
      for val1 in self.headBoundingBox.rectCorners:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_i().pack(self.landmarksInfo.confidence))
      length = len(self.landmarksInfo.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarksInfo.landmarks:
        _v1 = val1.location
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.realWorldCoordinates
        _x = _v2
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3fi().pack(_x.headPose.angles.pitch, _x.headPose.angles.roll, _x.headPose.angles.yaw, _x.headPose.confidence))
      length = len(self.skeletonJoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeletonJoints:
        _x = val1
        buff.write(_get_struct_if().pack(_x.type, _x.confidence))
        _v3 = val1.location
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.realWorldCoordinates
        _x = _v4
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_i9f3di().pack(_x.gestures.pointing.confidence, _x.gestures.pointing.originColor.x, _x.gestures.pointing.originColor.y, _x.gestures.pointing.originColor.z, _x.gestures.pointing.originWorld.x, _x.gestures.pointing.originWorld.y, _x.gestures.pointing.originWorld.z, _x.gestures.pointing.orientationColor.x, _x.gestures.pointing.orientationColor.y, _x.gestures.pointing.orientationColor.z, _x.gestures.pointing.orientationWorld.x, _x.gestures.pointing.orientationWorld.y, _x.gestures.pointing.orientationWorld.z, _x.gestures.wave.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.userInfo is None:
        self.userInfo = realsense_ros_person.msg.UserInfo()
      if self.centerOfMassImage is None:
        self.centerOfMassImage = geometry_msgs.msg.Point32()
      if self.centerOfMassWorld is None:
        self.centerOfMassWorld = geometry_msgs.msg.Point32()
      if self.userRect is None:
        self.userRect = realsense_ros_person.msg.RectWithConfidence()
      if self.headBoundingBox is None:
        self.headBoundingBox = realsense_ros_person.msg.RectWithConfidence()
      if self.landmarksInfo is None:
        self.landmarksInfo = realsense_ros_person.msg.LandmarksInfo()
      if self.headPose is None:
        self.headPose = realsense_ros_person.msg.EulerAnglesWithConfidence()
      if self.skeletonJoints is None:
        self.skeletonJoints = None
      if self.gestures is None:
        self.gestures = realsense_ros_person.msg.Gestures()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.userInfo.Id, _x.centerOfMassImage.x, _x.centerOfMassImage.y, _x.centerOfMassImage.z, _x.centerOfMassWorld.x, _x.centerOfMassWorld.y, _x.centerOfMassWorld.z, _x.userRect.confidence,) = _get_struct_i6fi().unpack(str[start:end])
      self.userRect.rectCorners = []
      for i in range(0, 2):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.userRect.rectCorners.append(val1)
      start = end
      end += 4
      (self.headBoundingBox.confidence,) = _get_struct_i().unpack(str[start:end])
      self.headBoundingBox.rectCorners = []
      for i in range(0, 2):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.headBoundingBox.rectCorners.append(val1)
      start = end
      end += 4
      (self.landmarksInfo.confidence,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarksInfo.landmarks = []
      for i in range(0, length):
        val1 = realsense_ros_person.msg.Landmark()
        _v5 = val1.location
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.realWorldCoordinates
        _x = _v6
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.landmarksInfo.landmarks.append(val1)
      _x = self
      start = end
      end += 16
      (_x.headPose.angles.pitch, _x.headPose.angles.roll, _x.headPose.angles.yaw, _x.headPose.confidence,) = _get_struct_3fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeletonJoints = []
      for i in range(0, length):
        val1 = realsense_ros_person.msg.SkeletonJoint()
        _x = val1
        start = end
        end += 8
        (_x.type, _x.confidence,) = _get_struct_if().unpack(str[start:end])
        _v7 = val1.location
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.realWorldCoordinates
        _x = _v8
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.skeletonJoints.append(val1)
      _x = self
      start = end
      end += 68
      (_x.gestures.pointing.confidence, _x.gestures.pointing.originColor.x, _x.gestures.pointing.originColor.y, _x.gestures.pointing.originColor.z, _x.gestures.pointing.originWorld.x, _x.gestures.pointing.originWorld.y, _x.gestures.pointing.originWorld.z, _x.gestures.pointing.orientationColor.x, _x.gestures.pointing.orientationColor.y, _x.gestures.pointing.orientationColor.z, _x.gestures.pointing.orientationWorld.x, _x.gestures.pointing.orientationWorld.y, _x.gestures.pointing.orientationWorld.z, _x.gestures.wave.type,) = _get_struct_i9f3di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i6fi().pack(_x.userInfo.Id, _x.centerOfMassImage.x, _x.centerOfMassImage.y, _x.centerOfMassImage.z, _x.centerOfMassWorld.x, _x.centerOfMassWorld.y, _x.centerOfMassWorld.z, _x.userRect.confidence))
      for val1 in self.userRect.rectCorners:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_i().pack(self.headBoundingBox.confidence))
      for val1 in self.headBoundingBox.rectCorners:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_i().pack(self.landmarksInfo.confidence))
      length = len(self.landmarksInfo.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarksInfo.landmarks:
        _v9 = val1.location
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.realWorldCoordinates
        _x = _v10
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3fi().pack(_x.headPose.angles.pitch, _x.headPose.angles.roll, _x.headPose.angles.yaw, _x.headPose.confidence))
      length = len(self.skeletonJoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeletonJoints:
        _x = val1
        buff.write(_get_struct_if().pack(_x.type, _x.confidence))
        _v11 = val1.location
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.realWorldCoordinates
        _x = _v12
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_i9f3di().pack(_x.gestures.pointing.confidence, _x.gestures.pointing.originColor.x, _x.gestures.pointing.originColor.y, _x.gestures.pointing.originColor.z, _x.gestures.pointing.originWorld.x, _x.gestures.pointing.originWorld.y, _x.gestures.pointing.originWorld.z, _x.gestures.pointing.orientationColor.x, _x.gestures.pointing.orientationColor.y, _x.gestures.pointing.orientationColor.z, _x.gestures.pointing.orientationWorld.x, _x.gestures.pointing.orientationWorld.y, _x.gestures.pointing.orientationWorld.z, _x.gestures.wave.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.userInfo is None:
        self.userInfo = realsense_ros_person.msg.UserInfo()
      if self.centerOfMassImage is None:
        self.centerOfMassImage = geometry_msgs.msg.Point32()
      if self.centerOfMassWorld is None:
        self.centerOfMassWorld = geometry_msgs.msg.Point32()
      if self.userRect is None:
        self.userRect = realsense_ros_person.msg.RectWithConfidence()
      if self.headBoundingBox is None:
        self.headBoundingBox = realsense_ros_person.msg.RectWithConfidence()
      if self.landmarksInfo is None:
        self.landmarksInfo = realsense_ros_person.msg.LandmarksInfo()
      if self.headPose is None:
        self.headPose = realsense_ros_person.msg.EulerAnglesWithConfidence()
      if self.skeletonJoints is None:
        self.skeletonJoints = None
      if self.gestures is None:
        self.gestures = realsense_ros_person.msg.Gestures()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.userInfo.Id, _x.centerOfMassImage.x, _x.centerOfMassImage.y, _x.centerOfMassImage.z, _x.centerOfMassWorld.x, _x.centerOfMassWorld.y, _x.centerOfMassWorld.z, _x.userRect.confidence,) = _get_struct_i6fi().unpack(str[start:end])
      self.userRect.rectCorners = []
      for i in range(0, 2):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.userRect.rectCorners.append(val1)
      start = end
      end += 4
      (self.headBoundingBox.confidence,) = _get_struct_i().unpack(str[start:end])
      self.headBoundingBox.rectCorners = []
      for i in range(0, 2):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.headBoundingBox.rectCorners.append(val1)
      start = end
      end += 4
      (self.landmarksInfo.confidence,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarksInfo.landmarks = []
      for i in range(0, length):
        val1 = realsense_ros_person.msg.Landmark()
        _v13 = val1.location
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.realWorldCoordinates
        _x = _v14
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.landmarksInfo.landmarks.append(val1)
      _x = self
      start = end
      end += 16
      (_x.headPose.angles.pitch, _x.headPose.angles.roll, _x.headPose.angles.yaw, _x.headPose.confidence,) = _get_struct_3fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeletonJoints = []
      for i in range(0, length):
        val1 = realsense_ros_person.msg.SkeletonJoint()
        _x = val1
        start = end
        end += 8
        (_x.type, _x.confidence,) = _get_struct_if().unpack(str[start:end])
        _v15 = val1.location
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.realWorldCoordinates
        _x = _v16
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.skeletonJoints.append(val1)
      _x = self
      start = end
      end += 68
      (_x.gestures.pointing.confidence, _x.gestures.pointing.originColor.x, _x.gestures.pointing.originColor.y, _x.gestures.pointing.originColor.z, _x.gestures.pointing.originWorld.x, _x.gestures.pointing.originWorld.y, _x.gestures.pointing.originWorld.z, _x.gestures.pointing.orientationColor.x, _x.gestures.pointing.orientationColor.y, _x.gestures.pointing.orientationColor.z, _x.gestures.pointing.orientationWorld.x, _x.gestures.pointing.orientationWorld.y, _x.gestures.pointing.orientationWorld.z, _x.gestures.wave.type,) = _get_struct_i9f3di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i6fi = None
def _get_struct_i6fi():
    global _struct_i6fi
    if _struct_i6fi is None:
        _struct_i6fi = struct.Struct("<i6fi")
    return _struct_i6fi
_struct_3fi = None
def _get_struct_3fi():
    global _struct_3fi
    if _struct_3fi is None:
        _struct_3fi = struct.Struct("<3fi")
    return _struct_3fi
_struct_i9f3di = None
def _get_struct_i9f3di():
    global _struct_i9f3di
    if _struct_i9f3di is None:
        _struct_i9f3di = struct.Struct("<i9f3di")
    return _struct_i9f3di
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if
