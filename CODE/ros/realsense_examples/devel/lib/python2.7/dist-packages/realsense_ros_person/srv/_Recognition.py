# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_ros_person/RecognitionRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RecognitionRequest(genpy.Message):
  _md5sum = "7d4730fa7bd1fbdf419fdc75b1b7e004"
  _type = "realsense_ros_person/RecognitionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 personId
"""
  __slots__ = ['personId']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       personId

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RecognitionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.personId is None:
        self.personId = 0
    else:
      self.personId = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.personId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.personId,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.personId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.personId,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_ros_person/RecognitionResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RecognitionResponse(genpy.Message):
  _md5sum = "10f761f45f5fdb424410b79e3dc54b21"
  _type = "realsense_ros_person/RecognitionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 status
int32 recognitionId
float32 similarityScore


int32 RECOGNITION_PASSED_PERSON_RECOGNIZED=0
int32 RECOGNITION_PASSED_PERSON_NOT_RECOGNIZED=1
int32 RECOGNITION_FAILED=2
int32 RECOGNITION_FAILED_FACE_NOT_DETECTED=3
int32 RECOGNITION_FAILED_FACE_NOT_CLEAR=4
int32 RECOGNITION_FAILED_PERSON_TOO_FAR=5
int32 RECOGNITION_FAILED_PERSON_TOO_CLOSE=6
int32 RECOGNITION_FAILED_FACE_AMBIGUITY=7

"""
  # Pseudo-constants
  RECOGNITION_PASSED_PERSON_RECOGNIZED = 0
  RECOGNITION_PASSED_PERSON_NOT_RECOGNIZED = 1
  RECOGNITION_FAILED = 2
  RECOGNITION_FAILED_FACE_NOT_DETECTED = 3
  RECOGNITION_FAILED_FACE_NOT_CLEAR = 4
  RECOGNITION_FAILED_PERSON_TOO_FAR = 5
  RECOGNITION_FAILED_PERSON_TOO_CLOSE = 6
  RECOGNITION_FAILED_FACE_AMBIGUITY = 7

  __slots__ = ['status','recognitionId','similarityScore']
  _slot_types = ['int32','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,recognitionId,similarityScore

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RecognitionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.recognitionId is None:
        self.recognitionId = 0
      if self.similarityScore is None:
        self.similarityScore = 0.
    else:
      self.status = 0
      self.recognitionId = 0
      self.similarityScore = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2if().pack(_x.status, _x.recognitionId, _x.similarityScore))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.status, _x.recognitionId, _x.similarityScore,) = _get_struct_2if().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2if().pack(_x.status, _x.recognitionId, _x.similarityScore))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.status, _x.recognitionId, _x.similarityScore,) = _get_struct_2if().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2if = None
def _get_struct_2if():
    global _struct_2if
    if _struct_2if is None:
        _struct_2if = struct.Struct("<2if")
    return _struct_2if
class Recognition(object):
  _type          = 'realsense_ros_person/Recognition'
  _md5sum = '2dd06767416b8aa59aeaa12368ef46df'
  _request_class  = RecognitionRequest
  _response_class = RecognitionResponse
