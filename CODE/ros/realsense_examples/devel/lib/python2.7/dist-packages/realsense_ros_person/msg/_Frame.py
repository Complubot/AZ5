# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_ros_person/Frame.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import realsense_ros_person.msg
import geometry_msgs.msg

class Frame(genpy.Message):
  _md5sum = "0fc1584508d060a88fda97d4fdfd469b"
  _type = "realsense_ros_person/Frame"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 numberOfUsers
User[] usersData

================================================================================
MSG: realsense_ros_person/User
UserInfo userInfo
geometry_msgs/Point32 centerOfMassImage
geometry_msgs/Point32 centerOfMassWorld
RectWithConfidence userRect
RectWithConfidence headBoundingBox
LandmarksInfo landmarksInfo
EulerAnglesWithConfidence headPose
SkeletonJoint[] skeletonJoints
Gestures gestures


================================================================================
MSG: realsense_ros_person/UserInfo
int32 Id

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: realsense_ros_person/RectWithConfidence
int32 confidence
geometry_msgs/Point32[2] rectCorners

================================================================================
MSG: realsense_ros_person/LandmarksInfo
int32 confidence
Landmark[] landmarks

================================================================================
MSG: realsense_ros_person/Landmark
geometry_msgs/Point location
geometry_msgs/Point32 realWorldCoordinates

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: realsense_ros_person/EulerAnglesWithConfidence
EulerAngles angles
int32 confidence

================================================================================
MSG: realsense_ros_person/EulerAngles
float32 pitch
float32 roll
float32 yaw

================================================================================
MSG: realsense_ros_person/SkeletonJoint
int32 type
float32 confidence
geometry_msgs/Point location
geometry_msgs/Point32 realWorldCoordinates

#joint types constants
int32 JOINT_ANKLE_LEFT=0
int32 JOINT_ANKLE_RIGHT=1
int32 JOINT_ELBOW_LEFT=2
int32 JOINT_ELBOW_RIGHT=3
int32 JOINT_FOOT_LEFT=4
int32 JOINT_FOOT_RIGHT=5
int32 JOINT_HAND_LEFT=6
int32 JOINT_HAND_RIGHT=7
int32 JOINT_HAND_TIP_LEFT=8
int32 JOINT_HAND_TIP_RIGHT=9
int32 JOINT_HEAD=10
int32 JOINT_HIP_LEFT=11
int32 JOINT_HIP_RIGHT=12
int32 JOINT_KNEE_LEFT=13
int32 JOINT_KNEE_RIGHT=14
int32 JOINT_NECK=15
int32 JOINT_SHOULDER_LEFT=16
int32 JOINT_SHOULDER_RIGHT=17
int32 JOINT_SPINE_BASE=18
int32 JOINT_SPINE_MID=19
int32 JOINT_SPINE_SHOULDER=20
int32 JOINT_THUMB_LEFT=21
int32 JOINT_THUMB_RIGHT=22
int32 JOINT_WRIST_LEFT=23
int32 JOINT_WRIST_RIGHT=24
int32 JOINT_UNKNOWN=25

================================================================================
MSG: realsense_ros_person/Gestures
Pointing pointing
Wave wave

================================================================================
MSG: realsense_ros_person/Pointing
int32 confidence
geometry_msgs/Point32 originColor
geometry_msgs/Point32 originWorld
geometry_msgs/Point32 orientationColor
geometry_msgs/Vector3 orientationWorld

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: realsense_ros_person/Wave
int32 type

#Wave gesture types
int32 WAVE_NOT_DETECTED=-1 # Wave not detected 
int32 WAVE_LEFT_LA=1       # Wave ended with hand motion to the left, in the left area
int32 WAVE_RIGHT_LA=2      # Wave ended with hand motion to the right, in the left area
int32 WAVE_LEFT_RA=3       # Wave ended with hand motion to the left, in the right area
int32 WAVE_RIGHT_RA=4      # Wave ended with hand motion to the right, in the right area

"""
  __slots__ = ['numberOfUsers','usersData']
  _slot_types = ['int32','realsense_ros_person/User[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       numberOfUsers,usersData

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Frame, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.numberOfUsers is None:
        self.numberOfUsers = 0
      if self.usersData is None:
        self.usersData = []
    else:
      self.numberOfUsers = 0
      self.usersData = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.numberOfUsers))
      length = len(self.usersData)
      buff.write(_struct_I.pack(length))
      for val1 in self.usersData:
        _v1 = val1.userInfo
        buff.write(_get_struct_i().pack(_v1.Id))
        _v2 = val1.centerOfMassImage
        _x = _v2
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v3 = val1.centerOfMassWorld
        _x = _v3
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v4 = val1.userRect
        buff.write(_get_struct_i().pack(_v4.confidence))
        for val3 in _v4.rectCorners:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v5 = val1.headBoundingBox
        buff.write(_get_struct_i().pack(_v5.confidence))
        for val3 in _v5.rectCorners:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v6 = val1.landmarksInfo
        buff.write(_get_struct_i().pack(_v6.confidence))
        length = len(_v6.landmarks)
        buff.write(_struct_I.pack(length))
        for val3 in _v6.landmarks:
          _v7 = val3.location
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v8 = val3.realWorldCoordinates
          _x = _v8
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v9 = val1.headPose
        _v10 = _v9.angles
        _x = _v10
        buff.write(_get_struct_3f().pack(_x.pitch, _x.roll, _x.yaw))
        buff.write(_get_struct_i().pack(_v9.confidence))
        length = len(val1.skeletonJoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.skeletonJoints:
          _x = val2
          buff.write(_get_struct_if().pack(_x.type, _x.confidence))
          _v11 = val2.location
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v12 = val2.realWorldCoordinates
          _x = _v12
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v13 = val1.gestures
        _v14 = _v13.pointing
        buff.write(_get_struct_i().pack(_v14.confidence))
        _v15 = _v14.originColor
        _x = _v15
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v16 = _v14.originWorld
        _x = _v16
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v17 = _v14.orientationColor
        _x = _v17
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v18 = _v14.orientationWorld
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = _v13.wave
        buff.write(_get_struct_i().pack(_v19.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.usersData is None:
        self.usersData = None
      end = 0
      start = end
      end += 4
      (self.numberOfUsers,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.usersData = []
      for i in range(0, length):
        val1 = realsense_ros_person.msg.User()
        _v20 = val1.userInfo
        start = end
        end += 4
        (_v20.Id,) = _get_struct_i().unpack(str[start:end])
        _v21 = val1.centerOfMassImage
        _x = _v21
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v22 = val1.centerOfMassWorld
        _x = _v22
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v23 = val1.userRect
        start = end
        end += 4
        (_v23.confidence,) = _get_struct_i().unpack(str[start:end])
        _v23.rectCorners = []
        for i in range(0, 2):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v23.rectCorners.append(val3)
        _v24 = val1.headBoundingBox
        start = end
        end += 4
        (_v24.confidence,) = _get_struct_i().unpack(str[start:end])
        _v24.rectCorners = []
        for i in range(0, 2):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v24.rectCorners.append(val3)
        _v25 = val1.landmarksInfo
        start = end
        end += 4
        (_v25.confidence,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v25.landmarks = []
        for i in range(0, length):
          val3 = realsense_ros_person.msg.Landmark()
          _v26 = val3.location
          _x = _v26
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v27 = val3.realWorldCoordinates
          _x = _v27
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v25.landmarks.append(val3)
        _v28 = val1.headPose
        _v29 = _v28.angles
        _x = _v29
        start = end
        end += 12
        (_x.pitch, _x.roll, _x.yaw,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (_v28.confidence,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.skeletonJoints = []
        for i in range(0, length):
          val2 = realsense_ros_person.msg.SkeletonJoint()
          _x = val2
          start = end
          end += 8
          (_x.type, _x.confidence,) = _get_struct_if().unpack(str[start:end])
          _v30 = val2.location
          _x = _v30
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v31 = val2.realWorldCoordinates
          _x = _v31
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.skeletonJoints.append(val2)
        _v32 = val1.gestures
        _v33 = _v32.pointing
        start = end
        end += 4
        (_v33.confidence,) = _get_struct_i().unpack(str[start:end])
        _v34 = _v33.originColor
        _x = _v34
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v35 = _v33.originWorld
        _x = _v35
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v36 = _v33.orientationColor
        _x = _v36
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v37 = _v33.orientationWorld
        _x = _v37
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v38 = _v32.wave
        start = end
        end += 4
        (_v38.type,) = _get_struct_i().unpack(str[start:end])
        self.usersData.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.numberOfUsers))
      length = len(self.usersData)
      buff.write(_struct_I.pack(length))
      for val1 in self.usersData:
        _v39 = val1.userInfo
        buff.write(_get_struct_i().pack(_v39.Id))
        _v40 = val1.centerOfMassImage
        _x = _v40
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v41 = val1.centerOfMassWorld
        _x = _v41
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v42 = val1.userRect
        buff.write(_get_struct_i().pack(_v42.confidence))
        for val3 in _v42.rectCorners:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v43 = val1.headBoundingBox
        buff.write(_get_struct_i().pack(_v43.confidence))
        for val3 in _v43.rectCorners:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v44 = val1.landmarksInfo
        buff.write(_get_struct_i().pack(_v44.confidence))
        length = len(_v44.landmarks)
        buff.write(_struct_I.pack(length))
        for val3 in _v44.landmarks:
          _v45 = val3.location
          _x = _v45
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v46 = val3.realWorldCoordinates
          _x = _v46
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v47 = val1.headPose
        _v48 = _v47.angles
        _x = _v48
        buff.write(_get_struct_3f().pack(_x.pitch, _x.roll, _x.yaw))
        buff.write(_get_struct_i().pack(_v47.confidence))
        length = len(val1.skeletonJoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.skeletonJoints:
          _x = val2
          buff.write(_get_struct_if().pack(_x.type, _x.confidence))
          _v49 = val2.location
          _x = _v49
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v50 = val2.realWorldCoordinates
          _x = _v50
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v51 = val1.gestures
        _v52 = _v51.pointing
        buff.write(_get_struct_i().pack(_v52.confidence))
        _v53 = _v52.originColor
        _x = _v53
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v54 = _v52.originWorld
        _x = _v54
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v55 = _v52.orientationColor
        _x = _v55
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v56 = _v52.orientationWorld
        _x = _v56
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v57 = _v51.wave
        buff.write(_get_struct_i().pack(_v57.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.usersData is None:
        self.usersData = None
      end = 0
      start = end
      end += 4
      (self.numberOfUsers,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.usersData = []
      for i in range(0, length):
        val1 = realsense_ros_person.msg.User()
        _v58 = val1.userInfo
        start = end
        end += 4
        (_v58.Id,) = _get_struct_i().unpack(str[start:end])
        _v59 = val1.centerOfMassImage
        _x = _v59
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v60 = val1.centerOfMassWorld
        _x = _v60
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v61 = val1.userRect
        start = end
        end += 4
        (_v61.confidence,) = _get_struct_i().unpack(str[start:end])
        _v61.rectCorners = []
        for i in range(0, 2):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v61.rectCorners.append(val3)
        _v62 = val1.headBoundingBox
        start = end
        end += 4
        (_v62.confidence,) = _get_struct_i().unpack(str[start:end])
        _v62.rectCorners = []
        for i in range(0, 2):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v62.rectCorners.append(val3)
        _v63 = val1.landmarksInfo
        start = end
        end += 4
        (_v63.confidence,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v63.landmarks = []
        for i in range(0, length):
          val3 = realsense_ros_person.msg.Landmark()
          _v64 = val3.location
          _x = _v64
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v65 = val3.realWorldCoordinates
          _x = _v65
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v63.landmarks.append(val3)
        _v66 = val1.headPose
        _v67 = _v66.angles
        _x = _v67
        start = end
        end += 12
        (_x.pitch, _x.roll, _x.yaw,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (_v66.confidence,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.skeletonJoints = []
        for i in range(0, length):
          val2 = realsense_ros_person.msg.SkeletonJoint()
          _x = val2
          start = end
          end += 8
          (_x.type, _x.confidence,) = _get_struct_if().unpack(str[start:end])
          _v68 = val2.location
          _x = _v68
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v69 = val2.realWorldCoordinates
          _x = _v69
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.skeletonJoints.append(val2)
        _v70 = val1.gestures
        _v71 = _v70.pointing
        start = end
        end += 4
        (_v71.confidence,) = _get_struct_i().unpack(str[start:end])
        _v72 = _v71.originColor
        _x = _v72
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v73 = _v71.originWorld
        _x = _v73
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v74 = _v71.orientationColor
        _x = _v74
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v75 = _v71.orientationWorld
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v76 = _v70.wave
        start = end
        end += 4
        (_v76.type,) = _get_struct_i().unpack(str[start:end])
        self.usersData.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
