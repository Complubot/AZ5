# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_ros_person/TrackingConfigRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrackingConfigRequest(genpy.Message):
  _md5sum = "686ca0728cbcd739a9efb35cc7c81a46"
  _type = "realsense_ros_person/TrackingConfigRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool enableRecognition
bool enableSkeleton
bool enablePointingGesture
bool enableWaveGesture
bool enableLandmarks
bool enableHeadBoundingBox
bool enableHeadPose
"""
  __slots__ = ['enableRecognition','enableSkeleton','enablePointingGesture','enableWaveGesture','enableLandmarks','enableHeadBoundingBox','enableHeadPose']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enableRecognition,enableSkeleton,enablePointingGesture,enableWaveGesture,enableLandmarks,enableHeadBoundingBox,enableHeadPose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackingConfigRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.enableRecognition is None:
        self.enableRecognition = False
      if self.enableSkeleton is None:
        self.enableSkeleton = False
      if self.enablePointingGesture is None:
        self.enablePointingGesture = False
      if self.enableWaveGesture is None:
        self.enableWaveGesture = False
      if self.enableLandmarks is None:
        self.enableLandmarks = False
      if self.enableHeadBoundingBox is None:
        self.enableHeadBoundingBox = False
      if self.enableHeadPose is None:
        self.enableHeadPose = False
    else:
      self.enableRecognition = False
      self.enableSkeleton = False
      self.enablePointingGesture = False
      self.enableWaveGesture = False
      self.enableLandmarks = False
      self.enableHeadBoundingBox = False
      self.enableHeadPose = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.enableRecognition, _x.enableSkeleton, _x.enablePointingGesture, _x.enableWaveGesture, _x.enableLandmarks, _x.enableHeadBoundingBox, _x.enableHeadPose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.enableRecognition, _x.enableSkeleton, _x.enablePointingGesture, _x.enableWaveGesture, _x.enableLandmarks, _x.enableHeadBoundingBox, _x.enableHeadPose,) = _get_struct_7B().unpack(str[start:end])
      self.enableRecognition = bool(self.enableRecognition)
      self.enableSkeleton = bool(self.enableSkeleton)
      self.enablePointingGesture = bool(self.enablePointingGesture)
      self.enableWaveGesture = bool(self.enableWaveGesture)
      self.enableLandmarks = bool(self.enableLandmarks)
      self.enableHeadBoundingBox = bool(self.enableHeadBoundingBox)
      self.enableHeadPose = bool(self.enableHeadPose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.enableRecognition, _x.enableSkeleton, _x.enablePointingGesture, _x.enableWaveGesture, _x.enableLandmarks, _x.enableHeadBoundingBox, _x.enableHeadPose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.enableRecognition, _x.enableSkeleton, _x.enablePointingGesture, _x.enableWaveGesture, _x.enableLandmarks, _x.enableHeadBoundingBox, _x.enableHeadPose,) = _get_struct_7B().unpack(str[start:end])
      self.enableRecognition = bool(self.enableRecognition)
      self.enableSkeleton = bool(self.enableSkeleton)
      self.enablePointingGesture = bool(self.enablePointingGesture)
      self.enableWaveGesture = bool(self.enableWaveGesture)
      self.enableLandmarks = bool(self.enableLandmarks)
      self.enableHeadBoundingBox = bool(self.enableHeadBoundingBox)
      self.enableHeadPose = bool(self.enableHeadPose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense_ros_person/TrackingConfigResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrackingConfigResponse(genpy.Message):
  _md5sum = "3a1255d4d998bd4d6585c64639b5ee9a"
  _type = "realsense_ros_person/TrackingConfigResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool status

"""
  __slots__ = ['status']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackingConfigResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = False
    else:
      self.status = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      self.status = bool(self.status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      self.status = bool(self.status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class TrackingConfig(object):
  _type          = 'realsense_ros_person/TrackingConfig'
  _md5sum = '78e03ba522060c37577ef42678654b8c'
  _request_class  = TrackingConfigRequest
  _response_class = TrackingConfigResponse
