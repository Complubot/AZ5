// Generated by gencpp from file controller/buttons.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MESSAGE_BUTTONS_H
#define CONTROLLER_MESSAGE_BUTTONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller
{
template <class ContainerAllocator>
struct buttons_
{
  typedef buttons_<ContainerAllocator> Type;

  buttons_()
    : TRIANGLE(false)
    , CIRCLE(false)
    , SQUARE(false)
    , CROSS(false)
    , UP(false)
    , DOWN(false)
    , LEFT(false)
    , RIGHT(false)
    , R1(false)
    , R2(false)
    , L1(false)
    , L2(false)  {
    }
  buttons_(const ContainerAllocator& _alloc)
    : TRIANGLE(false)
    , CIRCLE(false)
    , SQUARE(false)
    , CROSS(false)
    , UP(false)
    , DOWN(false)
    , LEFT(false)
    , RIGHT(false)
    , R1(false)
    , R2(false)
    , L1(false)
    , L2(false)  {
  (void)_alloc;
    }



   typedef uint8_t _TRIANGLE_type;
  _TRIANGLE_type TRIANGLE;

   typedef uint8_t _CIRCLE_type;
  _CIRCLE_type CIRCLE;

   typedef uint8_t _SQUARE_type;
  _SQUARE_type SQUARE;

   typedef uint8_t _CROSS_type;
  _CROSS_type CROSS;

   typedef uint8_t _UP_type;
  _UP_type UP;

   typedef uint8_t _DOWN_type;
  _DOWN_type DOWN;

   typedef uint8_t _LEFT_type;
  _LEFT_type LEFT;

   typedef uint8_t _RIGHT_type;
  _RIGHT_type RIGHT;

   typedef uint8_t _R1_type;
  _R1_type R1;

   typedef uint8_t _R2_type;
  _R2_type R2;

   typedef uint8_t _L1_type;
  _L1_type L1;

   typedef uint8_t _L2_type;
  _L2_type L2;





  typedef boost::shared_ptr< ::controller::buttons_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::buttons_<ContainerAllocator> const> ConstPtr;

}; // struct buttons_

typedef ::controller::buttons_<std::allocator<void> > buttons;

typedef boost::shared_ptr< ::controller::buttons > buttonsPtr;
typedef boost::shared_ptr< ::controller::buttons const> buttonsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller::buttons_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller::buttons_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'controller': ['/home/complubot/Documents/POLLOTRON/CODE/ros/controller/src/controller/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::controller::buttons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::buttons_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::buttons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::buttons_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::buttons_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::buttons_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller::buttons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7013f4c34338e575015a24a638b00725";
  }

  static const char* value(const ::controller::buttons_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7013f4c34338e575ULL;
  static const uint64_t static_value2 = 0x015a24a638b00725ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::buttons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller/buttons";
  }

  static const char* value(const ::controller::buttons_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller::buttons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool TRIANGLE\n\
bool CIRCLE\n\
bool SQUARE\n\
bool CROSS\n\
\n\
bool UP\n\
bool DOWN\n\
bool LEFT\n\
bool RIGHT\n\
\n\
\n\
bool R1\n\
bool R2\n\
bool L1\n\
bool L2\n\
";
  }

  static const char* value(const ::controller::buttons_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller::buttons_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.TRIANGLE);
      stream.next(m.CIRCLE);
      stream.next(m.SQUARE);
      stream.next(m.CROSS);
      stream.next(m.UP);
      stream.next(m.DOWN);
      stream.next(m.LEFT);
      stream.next(m.RIGHT);
      stream.next(m.R1);
      stream.next(m.R2);
      stream.next(m.L1);
      stream.next(m.L2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct buttons_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller::buttons_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller::buttons_<ContainerAllocator>& v)
  {
    s << indent << "TRIANGLE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TRIANGLE);
    s << indent << "CIRCLE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CIRCLE);
    s << indent << "SQUARE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SQUARE);
    s << indent << "CROSS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CROSS);
    s << indent << "UP: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.UP);
    s << indent << "DOWN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DOWN);
    s << indent << "LEFT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LEFT);
    s << indent << "RIGHT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RIGHT);
    s << indent << "R1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R1);
    s << indent << "R2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R2);
    s << indent << "L1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.L1);
    s << indent << "L2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.L2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MESSAGE_BUTTONS_H
